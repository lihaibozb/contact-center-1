server:
  port: 8803

spring:
  application:
    name: message-server

  data:
    cassandra:
      contact-points: [192.168.50.111:9042]
      keyspace-name: message
      username: cassandra
      password: 4ge4CxwcFW
      local-datacenter: datacenter1
      schema-action: create_if_not_exists
  redis:
    database: 2
    host: 192.168.50.103
    port: 6379
    password: G!Ps&eEwtsxd7NGf
    timeout: 5000

  r2dbc:
    url: r2dbc:postgresql://192.168.50.102:5432/postgres?currentSchema=message
    username: postgres
    password: JpESiz1nHf
    pool:
      enabled: true

  # security:
  #   oauth2:
  #     resourceserver:
  #       jwt:
  #         jwk-set-uri: http://localhost:8000/.well-known/jwks.json

  cloud:
    inetutils:
      ignored-interfaces:
        - eth*
      preferred-networks:
        - 192.168.*
    consul:
      host: 192.168.50.108
      port: 80
      discovery:
        prefer-ip-address: true
        instanceId: ${spring.application.name}:${vcap.application.instance_id:${spring.application.instance_id:${server.port}}}
        # health-check-url: http://${spring.cloud.client.ip-address}:${server.port}/actuator/health
    loadbalancer:
      ribbon:
        enabled: false

    stream:
      function:
        definition: message;inKStreamProcess;outKStreamProcess
      poller:
        fixed-delay: 500
        max-messages-per-poll: 1
      kafka:
        binder:
          brokers: 192.168.50.107:9092
          replication-factor: 1
          auto-add-partitions: true
          # min-partition-count: 3
          auto-alter-topics: true
          auto-create-topics: true
        streams:
          binder:
            functions:
              message:
                applicationId: message
              inKStreamProcess:
                applicationId: inKStreamProcess
              outKStreamProcess:
                applicationId: outKStreamProcess
      bindings:
        # 删除 topic kafka-topics.sh --zookeeper kafka-zookeeper --delete --topic im.message
        message-out-0:
          # producer:
          #   partition-key-expression: headers['partitionKey']
          #   partition-count: 7
          destination: im.test
        outKStreamProcess-in-0:
          # consumer:
          #   # 消费特定分区
          #   auto-rebalance-enabled: false
          #   instance-count: 7
          #   instance-index: 1
          destination: im.test
        outKStreamProcess-out-0:
          # producer:
          #   # partition-key-expression: headers['partitionKey']
          #   partition-count: 7
          destination: im.message
        inKStreamProcess-in-0:
          destination: im.message

  security:
    oauth2:
      client:
        provider:
          authProvider:
            token-uri: http://oauth2-auth-server/oauth/token
        registration:
          authProvider:
            client-id: inner_client
            client-secret: test_secret
            authorization-grant-type: client_credentials
logging:
  level:
    root: info
